name: Rust Proxy Scanner (Ultimate) - KV Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

concurrency:
  group: rust-proxy-scan-final-plaintext
  cancel-in-progress: true

permissions:
  contents: read
  actions: write

env:
  CARGO_TERM_COLOR: always
  CACHE_FILE: .cachelastbestip.txt
  RUST_CACHE_KEY: v4
  CF_ENVIRONMENT: production
  SCAN_BINARY: ./target/release/RScanner
  SCAN_LOG: scan.log
  MAX_CF_RETRIES: "5"
  CF_RETRY_BASE_SLEEP: "2"
  SCANNER_TIMEOUT: "600"

jobs:
  update-proxy-variable:
    name: Build ‚Üí Scan ‚Üí Update Cloudflare KV (RScanner)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      bestip: ${{ steps.scan.outputs.bestip }}

    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          set -euo pipefail
          echo "=> Updating package lists..."
          sudo apt-get update -y
          echo "=> Installing required packages..."
          sudo apt-get install -y jq curl netcat-openbsd build-essential pkg-config libssl-dev ca-certificates coreutils

      - name: Restore Best IP Cache
        uses: actions/cache@v4
        id: ip-cache
        with:
          path: ${{ env.CACHE_FILE }}
          key: rust-proxy-scanner-best-ip-cache-${{ env.RUST_CACHE_KEY }}-${{ runner.os }}
          restore-keys: |
            rust-proxy-scanner-best-ip-cache-${{ env.RUST_CACHE_KEY }}-
            rust-proxy-scanner-best-ip-cache-

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust artifacts and registry
        uses: actions/cache@v4
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-cache-${{ env.RUST_CACHE_KEY }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-cache-${{ env.RUST_CACHE_KEY }}-${{ runner.os }}-

      - name: Build Rust project (release)
        run: |
          set -euo pipefail
          echo "=> Starting cargo build --release"
          echo "=> Build timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
                
          if ! cargo build --release 2>&1 | tee build-output.log; then
            echo "‚ùå Cargo build failed. Showing last 200 lines:"
            tail -n 200 build-output.log || true
            exit 1
          fi
                
          echo "‚úÖ Cargo build completed successfully"
          ls -lah target/release/ || true
                
          if [ -f "${{ env.SCAN_BINARY }}" ]; then
            file "${{ env.SCAN_BINARY }}" || true
            echo "‚úÖ Scanner binary verified"
          else
            echo "‚ùå ERROR: Scanner binary not found at ${{ env.SCAN_BINARY }}"
            exit 1
          fi

      - name: Run scanner and select best IP (Lowest Ping)
        id: scan
        timeout-minutes: 15
        run: |
          set -euo pipefail
          echo "=== Scanner execution started ==="
          echo "=> Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
                
          BIN="${{ env.SCAN_BINARY }}"
          LOG="${{ env.SCAN_LOG }}"
          CACHE_FILE="${{ env.CACHE_FILE }}"
          TIMEOUT="${{ env.SCANNER_TIMEOUT }}"
                
          : > "$LOG"
      
          if [ ! -f "$BIN" ]; then
            echo "‚ùå FATAL: Scanner binary not found at $BIN"
            ls -la target/release/ || true
            exit 1
          fi
      
          chmod +x "$BIN"
                
          echo "üöÄ Executing scanner (timeout: ${TIMEOUT}s)"
                
          set +e
          timeout "${TIMEOUT}s" "$BIN" > "$LOG" 2>&1
          SCANNER_EXIT_CODE=$?
          set -e
                
          if [ $SCANNER_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Scanner completed successfully"
          elif [ $SCANNER_EXIT_CODE -eq 124 ]; then
            echo "‚ö†Ô∏è Scanner timed out after ${TIMEOUT}s"
            echo "=> Attempting to parse available results..."
          else
            echo "‚ö†Ô∏è Scanner exited with code $SCANNER_EXIT_CODE"
            echo "=> Attempting to parse available results..."
          fi
      
          echo "=> Scanner finished at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          LOG_LINES=$(wc -l < "$LOG" 2>/dev/null || echo 0)
          echo "=> Log contains ${LOG_LINES} lines"
      
          echo "üîç Parsing results for live proxies..."
                
          grep -iE "(PROXY[[:space:]]+LIVE)" "$LOG" | \
            grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}[[:space:]]*\([0-9]+[[:space:]]*m?s\)' | \
            sed -E 's/^[[:space:]]*([0-9.]+)[[:space:]]*\(([0-9]+)[[:space:]]*m?s\)/\2 \1/' | \
            awk '{
              split($2, octets, ".")
              if (length(octets) == 4 && $1 ~ /^[0-9]+$/ && $1 > 0) {
                print $1, $2
              }
            }' > unsorted_candidates.txt || touch unsorted_candidates.txt
                
          if [ -s unsorted_candidates.txt ]; then
            sort -n -k1,1 unsorted_candidates.txt | head -n 20 > candidates.txt 2>/dev/null || {
              echo "‚ö†Ô∏è Sort command failed, using unsorted data"
              head -n 20 unsorted_candidates.txt > candidates.txt
            }
          else
            touch candidates.txt
          fi
      
          CANDIDATES_COUNT=$(wc -l < candidates.txt 2>/dev/null || echo 0)
          echo "=> Found ${CANDIDATES_COUNT} valid candidate IPs"
                
          if [ "$CANDIDATES_COUNT" -gt 0 ]; then
            echo "=> Top 5 candidates (sorted by lowest latency):"
            head -n 5 candidates.txt | while read -r latency ip; do
              echo "   ‚Ä¢ $ip ‚Üí ${latency}ms latency"
            done
          fi
      
          BEST_IP=""
          BEST_LATENCY=""
      
          if [ -s candidates.txt ]; then
            read -r BEST_LATENCY BEST_IP < candidates.txt
            echo "üéØ Best IP selected (lowest ping): $BEST_IP with ${BEST_LATENCY}ms latency"
          else
            echo "üü° No live proxies found in current scan results"
          fi
      
          if [ -z "${BEST_IP}" ] && [ -f "${CACHE_FILE}" ]; then
            echo "üîÅ Attempting to use cached IP as fallback..."
            CACHED_IP=$(tr -d ' \r\n\t' < "${CACHE_FILE}" 2>/dev/null || true)
                  
            if [[ "$CACHED_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              IFS='.' read -ra OCTETS <<< "$CACHED_IP"
              VALID=true
              for octet in "${OCTETS[@]}"; do
                if [ "$octet" -lt 0 ] || [ "$octet" -gt 255 ]; then
                  VALID=false
                  break
                fi
              done
              
              if [ "$VALID" = true ]; then
                BEST_IP="$CACHED_IP"
                echo "‚úÖ Using cached IP: $BEST_IP"
              else
                echo "‚ö†Ô∏è Cached IP has invalid octets: ${CACHED_IP}"
              fi
            else
              echo "‚ö†Ô∏è Cache contains invalid IP format: ${CACHED_IP}"
            fi
          fi
      
          if [ -z "${BEST_IP}" ]; then
            echo "‚ùå FATAL: No valid IP available from scan or cache"
            tail -n 150 "$LOG" || true
            exit 1
          fi
      
          echo "üíæ Saving best IP to cache"
          echo -n "$BEST_IP" > "${CACHE_FILE}"
      
          echo "bestip=${BEST_IP}" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Scanner step completed successfully"

      - name: Upload scan.log for debugging (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-log-${{ github.run_id }}
          path: ${{ env.SCAN_LOG }}
          retention-days: 7
          if-no-files-found: warn

      - name: Upload candidates file for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: candidates-${{ github.run_id }}
          path: candidates.txt
          retention-days: 7
          if-no-files-found: ignore
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler CLI
        run: |
          set -euo pipefail
          echo "=> Installing Wrangler CLI using npm..."
          npm install -g wrangler@latest
          echo "=> Wrangler version check:"
          wrangler --version

      - name: Update Cloudflare KV using Wrangler
        id: update-kv
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_KV_NAMESPACE_ID: ${{ secrets.CF_KV_NAMESPACE_ID }}
          CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
          CF_VAR_KEY: ${{ secrets.CF_VAR_KEY }}
          BESTIP: ${{ steps.scan.outputs.bestip }}
        run: |
          set -euo pipefail
          
          echo "=== Cloudflare KV update (Wrangler) started ==="
          
          # Verify all required environment variables
          for required_var in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CF_KV_NAMESPACE_ID CF_VAR_KEY BESTIP; do
            if [ -z "${!required_var}" ]; then
              echo "‚ùå ERROR: ${required_var} is not set"
              exit 1
            fi
          done
          
          echo "‚úÖ All required environment variables are set"
          echo "üöÄ Attempting to update KV value: ${BESTIP}"
          echo "=> Namespace ID: ${CF_KV_NAMESPACE_ID}"
          echo "=> Key: ${CF_VAR_KEY}"
          
          # Create a temporary file with the IP value
          echo -n "${BESTIP}" > /tmp/kv_value.txt
          
          # Test Wrangler authentication first
          echo "=> Testing Wrangler authentication..."
          if ! wrangler whoami 2>&1 | tee /tmp/whoami.log; then
            echo "‚ùå Wrangler authentication failed"
            cat /tmp/whoami.log
            exit 1
          fi
          echo "‚úÖ Wrangler authentication successful"
          
          # Update KV with detailed error handling
          echo "=> Executing KV update command..."
          
          if wrangler kv key put "${CF_VAR_KEY}" "${BESTIP}" \
            --namespace-id "${CF_KV_NAMESPACE_ID}" \
            --preview false 2>&1 | tee /tmp/kv_update.log; then
            
            echo "‚úÖ KV update command executed successfully"
            
            # Verify the update by reading back the value
            echo "=> Verifying KV update..."
            sleep 2  # Give KV a moment to propagate
            
            if wrangler kv key get "${CF_VAR_KEY}" \
              --namespace-id "${CF_KV_NAMESPACE_ID}" \
              --preview false > /tmp/kv_verify.txt 2>&1; then
              
              STORED_VALUE=$(cat /tmp/kv_verify.txt | tr -d '\n\r\t ')
              
              if [ "${STORED_VALUE}" = "${BESTIP}" ]; then
                echo "‚úÖ KV verification successful - Value matches: ${STORED_VALUE}"
              else
                echo "‚ö†Ô∏è WARNING: Stored value (${STORED_VALUE}) doesn't match expected (${BESTIP})"
              fi
            else
              echo "‚ö†Ô∏è Could not verify KV value, but update command succeeded"
              cat /tmp/kv_verify.txt
            fi
            
          else
            echo "‚ùå FATAL: Wrangler KV update failed"
            echo "=> Command output:"
            cat /tmp/kv_update.log
            
            # Additional debugging information
            echo "=> Checking namespace access..."
            wrangler kv namespace list 2>&1 || echo "Could not list namespaces"
            
            exit 1
          fi
          
          # Perform Worker health check if configured
          if [ -n "${CF_WORKER_NAME}" ]; then
            echo "=> Performing Worker health check..."
            HEALTH_URL="https://${CF_WORKER_NAME}.workers.dev/health"
            
            health_check_passed=false
            max_health_checks=3
                  
            for health_attempt in $(seq 1 $max_health_checks); do
              echo "=> Health check attempt ${health_attempt}/${max_health_checks}"
              
              http_status=$(curl -s -o /tmp/health_response.txt -w "%{http_code}" \
                --max-time 10 \
                --connect-timeout 5 \
                "${HEALTH_URL}" 2>/dev/null || echo "000")
                    
              if [ "$http_status" = "200" ]; then
                echo "‚úÖ Health check passed (HTTP ${http_status})"
                health_check_passed=true
                break
              else
                echo "‚ö†Ô∏è Health check returned HTTP ${http_status}"
                if [ -f /tmp/health_response.txt ]; then
                  echo "=> Response:"
                  head -n 20 /tmp/health_response.txt
                fi
              fi
              
              if [ "$health_attempt" -lt "$max_health_checks" ]; then
                sleep 3
              fi
            done
      
            if [ "$health_check_passed" = "false" ]; then
              echo "‚ö†Ô∏è WARNING: Health check failed, but KV was updated to: ${BESTIP}"
              echo "=> This may indicate a Worker configuration issue, not a KV issue"
            fi
          else
            echo "=> Skipping health check (CF_WORKER_NAME not configured)"
          fi
          
          # Set output for subsequent jobs
          echo "bestip=${BESTIP}" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Cloudflare KV update completed successfully"
          echo "=== Final IP in KV: ${BESTIP} ==="
          echo "=== Cloudflare KV update (Wrangler) ended ==="

      - name: Upload Wrangler logs for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wrangler-logs-${{ github.run_id }}
          path: /tmp/*.log
          retention-days: 7
          if-no-files-found: ignore

  post-cache-artifacts:
    name: Post Cache Rust artifacts & registry
    runs-on: ubuntu-latest
    needs: update-proxy-variable
    if: always()
    steps:
      - name: Cache maintenance completed
        run: echo "Cache maintenance completed."

  post-restore-ip-cache:
    name: Post Restore Best IP Cache
    runs-on: ubuntu-latest
    needs: update-proxy-variable
    if: always()
    steps:
      - name: IP cache status
        run: echo "Best IP cache has been updated for subsequent workflow runs"

  cleanup-runs:
    name: Post Checkout repository (full)
    runs-on: ubuntu-latest
    needs: update-proxy-variable
    if: always()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Checkout for cleanup
        uses: actions/checkout@v4
              
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0

  complete-job:
    name: Complete job
    runs-on: ubuntu-latest
    needs: update-proxy-variable
    if: always()
    steps:
      - name: Workflow execution summary
        run: |
          echo "=== Workflow Execution Summary ==="
          echo "=> Best IP selected: ${{ needs.update-proxy-variable.outputs.bestip }}"
          echo "=> Workflow Status: Complete"
          echo "=> Check artifacts for detailed logs"
