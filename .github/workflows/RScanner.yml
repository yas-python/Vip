# .github/workflows/RScanner.yml
# Name: Rust Proxy Scanner for Workers (Ultimate/Final - Plaintext Var)

name: Rust Proxy Scanner for Workers (Ultimate/Final - Plaintext Var)

# Triggers for the workflow
on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *' # Runs every hour

# Ensure only one instance runs at a time
concurrency:
  group: rust-proxy-scan-final-plaintext
  cancel-in-progress: true

# Fine-grained permissions required by steps (keep minimal & explicit)
permissions:
  contents: read
  actions: write

# Environment variables available to all jobs
env:
  CARGO_TERM_COLOR: always
  CACHE_FILE: .cachelastbestip.txt
  RUST_CACHE_KEY: v4
  TIMEOUT_MINUTES: 30
  CF_ENVIRONMENT: production

jobs:
  # JOB 1: Finds the best proxy and updates Cloudflare Plaintext Variable
  update-proxy-variable:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.TIMEOUT_MINUTES }}
    outputs:
      bestip: ${{ steps.scan.outputs.bestip }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup environment (jq, curl, netcat)
        run: |
          set -euo pipefail
          echo "Installing essential packages..."
          sudo apt-get update -y
          sudo apt-get install -y jq curl netcat-openbsd

      - name: Manage Best IP Cache (restore)
        uses: actions/cache@v4
        id: ip-cache
        with:
          path: ${{ env.CACHE_FILE }}
          # Keep a stable key; bump RUST_CACHE_KEY to invalidate manually
          key: rust-proxy-scanner-best-ip-cache-${{ env.RUST_CACHE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.RUST_CACHE_KEY }}

      - name: Build Rust project
        run: |
          set -euo pipefail
          cargo build --release

      - name: Run scanner and choose best IP
        id: scan
        run: |
          set -euo pipefail
          BIN="./target/release/RScanner"

          if [ ! -f "$BIN" ]; then
            echo "‚ùå FATAL: Scanner executable not found ($BIN). Build likely failed."
            exit 1
          fi

          chmod +x "$BIN"
          : > scan.log

          echo "üöÄ Starting proxy scan..."
          # Run scanner and capture all output; do not fail whole step on non-zero exit (we handle)
          "$BIN" 2>&1 | tee -a scan.log || echo "‚ö†Ô∏è Scanner exited non-zero; continuing to parse results."

          BEST=""
          BEST_LAT=""

          echo "üîç Analyzing scan results..."
          # Extract lines that indicate live proxies and their latency + IPv4
          awk '
            BEGIN{IGNORECASE=1}
            /PROXY[[:space:]]+LIVE/ {
              if (match($0, /([0-9]+)[[:space:]]*ms/, lat)) { latency=lat[1] } else next
              if (match($0, /([0-9]{1,3}(\\.[0-9]{1,3}){3})/ , addr)) { ip=addr[1] } else next
              print latency, ip
            }
          ' scan.log | sort -n -k1,1 > candidates.txt || true

          if [ -s candidates.txt ]; then
            BEST_LAT=$(awk 'NR==1{print $1}' candidates.txt)
            BEST=$(awk 'NR==1{print $2}' candidates.txt)
            echo "‚úÖ Selected best candidate: $BEST (latency: ${BEST_LAT} ms)"
          else
            echo "üü° No live proxies found in scan.log. Will attempt to use cache."
          fi

          # Fallback to cached IP if scanner found nothing
          if [ -z "${BEST:-}" ] && [ -f "${CACHE_FILE}" ]; then
            BEST="$(tr -d ' \r\n' < ${CACHE_FILE})" || BEST=""
            # Validate IPv4 (basic)
            if ! [[ "$BEST" =~ ^[0-9]{1,3}(\.[0-9]{1,3}){3}$ ]]; then
                echo "‚ùå Cached IP '$BEST' is invalid. Ignoring cache."
                BEST=""
            else
                echo "‚úÖ Using cached IP: $BEST"
            fi
          fi

          if [ -z "${BEST:-}" ]; then
            echo "‚ùå FATAL: No best IP found from scan or cache. Aborting job."
            # attach scan.log via artifact step below (upload will still run via if: always())
            exit 1
          fi

          echo "üíæ Saving '$BEST' to cache file."
          echo "$BEST" > ${CACHE_FILE}

          # Set GitHub output
          echo "bestip=$BEST" >> "$GITHUB_OUTPUT"

      - name: Upload scan.log for debug
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-log-${{ github.run_id }}
          path: scan.log

      - name: Update Cloudflare Worker Variable
        env:
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
          CF_VAR_NAME: ${{ secrets.CF_VAR_NAME }}
          BESTIP: ${{ steps.scan.outputs.bestip }}
          CF_ENVIRONMENT: ${{ env.CF_ENVIRONMENT }}
        run: |
          set -euo pipefail

          echo "üîê Validating required inputs and secrets..."
          if [ -z "${BESTIP:-}" ]; then echo "‚ùå ERROR: BESTIP is empty." ; exit 1 ; fi
          if [ -z "${CF_ACCOUNT_ID:-}" ]; then echo "‚ùå ERROR: CF_ACCOUNT_ID is not set." ; exit 1 ; fi
          if [ -z "${CF_API_TOKEN:-}" ]; then echo "‚ùå ERROR: CF_API_TOKEN is not set or empty. Ensure token has workers.api:edit permission." ; exit 1 ; fi
          if [ -z "${CF_WORKER_NAME:-}" ]; then echo "‚ùå ERROR: CF_WORKER_NAME is empty." ; exit 1 ; fi
          if [ -z "${CF_VAR_NAME:-}" ]; then echo "‚ùå ERROR: CF_VAR_NAME is empty." ; exit 1 ; fi
          if [ -z "${CF_ENVIRONMENT:-}" ]; then echo "‚ùå ERROR: CF_ENVIRONMENT is empty." ; exit 1 ; fi

          GET_API_URL="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/workers/services/${CF_WORKER_NAME}/environments/${CF_ENVIRONMENT}"
          PUT_API_URL="${GET_API_URL}/settings"

          echo "üì° Fetching existing configuration from Cloudflare..."
          RESPONSE=$(curl -s -X GET "$GET_API_URL" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json")

          # Detect common Cloudflare GET errors
          if echo "$RESPONSE" | jq -e '.success != true' > /dev/null; then
            echo "‚ùå Cloudflare GET failed. Response:"
            echo "$RESPONSE"
            exit 1
          fi

          VARS_JSON=$(echo "$RESPONSE" | jq '.result.settings.vars')
          SECRETS_JSON=$(echo "$RESPONSE" | jq '.result.settings.secrets')

          if [ "$VARS_JSON" = "null" ]; then VARS_JSON="{}" ; fi
          if [ "$SECRETS_JSON" = "null" ]; then SECRETS_JSON="{}" ; fi

          echo "‚úÖ Existing configuration retrieved. Preparing updated payload..."

          UPDATED_VARS=$(echo "$VARS_JSON" | jq --arg name "$CF_VAR_NAME" --arg value "$BESTIP" '. | .[$name] = $value')

          FINAL_PAYLOAD=$(jq -n \
            --argjson vars "$UPDATED_VARS" \
            --argjson secrets "$SECRETS_JSON" \
            '{ "vars": $vars, "secrets": $secrets }')

          echo "üì° Sending PUT request to update Worker service settings..."
          PUT_RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$PUT_API_URL" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data "$FINAL_PAYLOAD")

          HTTP_CODE=$(echo "$PUT_RESPONSE" | tail -n1)
          BODY=$(echo "$PUT_RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "‚ùå Cloudflare API Error (HTTP: $HTTP_CODE). Body:"
            echo "$BODY"
            echo "üí° HINT: Ensure CF_API_TOKEN has permission 'workers.services:edit' (or appropriate workers.api:edit) and that CF_WORKER_NAME is exact service name."
            exit 1
          fi

          echo "‚úÖ Cloudflare Worker Variable '${CF_VAR_NAME}' updated successfully in '${CF_ENVIRONMENT}'."

  # JOB 2: Cleanup workflow runs (always runs after job1)
  cleanup-runs:
    runs-on: ubuntu-latest
    needs: update-proxy-variable
    if: always()
    permissions:
      actions: write
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
