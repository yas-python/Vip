name: Rust Proxy Scanner (Ultimate) - KV Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

concurrency:
  group: rust-proxy-scan-final-plaintext
  cancel-in-progress: true

permissions:
  contents: read
  actions: write

env:
  CARGO_TERM_COLOR: always
  CACHE_FILE: .cachelastbestip.txt
  RUST_CACHE_KEY: v4
  CF_ENVIRONMENT: production
  SCAN_BINARY: ./target/release/RScanner
  SCAN_LOG: scan.log
  MAX_CF_RETRIES: "5"
  CF_RETRY_BASE_SLEEP: "2"
  SCANNER_TIMEOUT: "600"

jobs:
  update-proxy-variable:
    name: Build ‚Üí Scan ‚Üí Update Cloudflare KV (RScanner)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      bestip: ${{ steps.scan.outputs.bestip }}

    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          set -euo pipefail
          echo "=> Updating package lists..."
          sudo apt-get update -y
          echo "=> Installing required packages..."
          sudo apt-get install -y jq curl netcat-openbsd build-essential pkg-config libssl-dev ca-certificates coreutils

      - name: Restore Best IP Cache
        uses: actions/cache@v4
        id: ip-cache
        with:
          path: ${{ env.CACHE_FILE }}
          key: rust-proxy-scanner-best-ip-cache-${{ env.RUST_CACHE_KEY }}-${{ runner.os }}
          restore-keys: |
            rust-proxy-scanner-best-ip-cache-${{ env.RUST_CACHE_KEY }}-
            rust-proxy-scanner-best-ip-cache-

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust artifacts and registry
        uses: actions/cache@v4
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-cache-${{ env.RUST_CACHE_KEY }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-cache-${{ env.RUST_CACHE_KEY }}-${{ runner.os }}-

      - name: Build Rust project (release)
        run: |
          set -euo pipefail
          echo "=> Starting cargo build --release"
          echo "=> Build timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          if ! cargo build --release 2>&1 | tee build-output.log; then
            echo "‚ùå Cargo build failed. Showing last 200 lines:"
            tail -n 200 build-output.log || true
            exit 1
          fi
          
          echo "‚úÖ Cargo build completed successfully"
          ls -lah target/release/ || true
          
          if [ -f "${{ env.SCAN_BINARY }}" ]; then
            file "${{ env.SCAN_BINARY }}" || true
            echo "‚úÖ Scanner binary verified"
          else
            echo "‚ùå ERROR: Scanner binary not found at ${{ env.SCAN_BINARY }}"
            exit 1
          fi

      - name: Run scanner and select best IP
        id: scan
        timeout-minutes: 15
        run: |
          set -euo pipefail
          echo "=== Scanner execution started ==="
          echo "=> Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          BIN="${{ env.SCAN_BINARY }}"
          LOG="${{ env.SCAN_LOG }}"
          CACHE_FILE="${{ env.CACHE_FILE }}"
          TIMEOUT="${{ env.SCANNER_TIMEOUT }}"
          
          : > "$LOG"

          if [ ! -f "$BIN" ]; then
            echo "‚ùå FATAL: Scanner binary not found at $BIN"
            ls -la target/release/ || true
            exit 1
          fi

          chmod +x "$BIN"
          
          echo "üöÄ Executing scanner (timeout: ${TIMEOUT}s)"
          
          if timeout "${TIMEOUT}s" "$BIN" 2>&1 | tee -a "$LOG"; then
            echo "‚úÖ Scanner completed successfully"
          else
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              echo "‚ö†Ô∏è Scanner timed out after ${TIMEOUT}s"
            else
              echo "‚ö†Ô∏è Scanner exited with code $EXIT_CODE"
            fi
            echo "=> Attempting to parse available results..."
          fi

          echo "=> Scanner finished at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=> Log contains $(wc -l < "$LOG") lines"

          echo "üîç Parsing results for live proxies..."
          
          awk '
            BEGIN { IGNORECASE=1 }
            /PROXY[[:space:]]+LIVE/ {
              if (match($0, /([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})/, addr)) {
                ip = addr[1]
              } else {
                next
              }
              
              if (match($0, /\(([0-9]+)[[:space:]]*ms\)/, lat)) {
                latency = lat[1]
              } else if (match($0, /([0-9]+)[[:space:]]*ms/, lat)) {
                latency = lat[1]
              } else {
                next
              }
              
              split(ip, octets, ".")
              valid = 1
              for (i = 1; i <= 4; i++) {
                if (octets[i] < 0 || octets[i] > 255) {
                  valid = 0
                  break
                }
              }
              
              if (valid) {
                print latency, ip
              }
            }
          ' "$LOG" > unsorted_candidates.txt
          
          if [ -s unsorted_candidates.txt ]; then
            sort -n -k1,1 unsorted_candidates.txt 2>/dev/null | head -n 20 > candidates.txt || {
              echo "‚ö†Ô∏è Sort command failed, using unsorted data"
              head -n 20 unsorted_candidates.txt > candidates.txt
            }
          else
            touch candidates.txt
          fi

          CANDIDATES_COUNT=$(wc -l < candidates.txt)
          echo "=> Found ${CANDIDATES_COUNT} valid candidate IPs"
          
          if [ "$CANDIDATES_COUNT" -gt 0 ]; then
            echo "=> Top 5 candidates:"
            head -n 5 candidates.txt | while read -r lat ip; do
              echo "   ‚Ä¢ $ip (${lat}ms)"
            done
          fi

          BEST=""
          BEST_LAT=""

          if [ -s candidates.txt ]; then
            BEST_LAT=$(awk 'NR==1 {print $1}' candidates.txt)
            BEST=$(awk 'NR==1 {print $2}' candidates.txt)
            echo "‚úÖ Best IP from current scan: $BEST (${BEST_LAT}ms)"
          else
            echo "üü° No live proxies found in scan results"
          fi

          if [ -z "${BEST}" ] && [ -f "${CACHE_FILE}" ]; then
            echo "üîÅ Attempting to use cached IP..."
            CACHED=$(tr -d ' \r\n\t' < "${CACHE_FILE}" 2>/dev/null || true)
            
            if [[ "$CACHED" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              BEST="$CACHED"
              echo "‚úÖ Using cached IP: $BEST"
            else
              echo "‚ö†Ô∏è Cache contains invalid IP format"
            fi
          fi

          if [ -z "${BEST}" ]; then
            echo "‚ùå FATAL: No valid IP available"
            echo "=> Scan log preview (last 100 lines):"
            tail -n 100 "$LOG" || true
            exit 1
          fi

          if ! [[ "$BEST" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "‚ùå FATAL: Invalid IP format: $BEST"
            exit 1
          fi

          echo "üíæ Saving best IP to cache"
          echo -n "$BEST" > "${CACHE_FILE}"
          
          if [ -f "${CACHE_FILE}" ]; then
            VERIFY=$(cat "${CACHE_FILE}")
            echo "=> Cache verified: $VERIFY"
          fi

          echo "bestip=${BEST}" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Scanner step completed"
          echo "=> Selected IP: ${BEST}"
          [ -n "${BEST_LAT}" ] && echo "=> Latency: ${BEST_LAT}ms"
          echo "=== Scanner execution ended ==="

      - name: Upload scan log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-log-${{ github.run_id }}
          path: ${{ env.SCAN_LOG }}
          retention-days: 7

      - name: Upload candidates file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: candidates-${{ github.run_id }}
          path: candidates.txt
          retention-days: 7
          if-no-files-found: ignore

      - name: Update Cloudflare KV with retry logic
        id: update-kv
        env:
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_KV_NAMESPACE_ID: ${{ secrets.CF_KV_NAMESPACE_ID }}
          CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
          CF_VAR_KEY: ${{ secrets.CF_VAR_KEY }}
          BESTIP: ${{ steps.scan.outputs.bestip }}
          MAX_RETRIES: ${{ env.MAX_CF_RETRIES }}
          BASE_SLEEP: ${{ env.CF_RETRY_BASE_SLEEP }}
        run: |
          set -euo pipefail
          
          echo "=== Cloudflare KV update started ==="
          echo "=> Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          if [ -z "${BESTIP}" ]; then
            echo "‚ùå ERROR: BESTIP is empty"
            exit 1
          fi
          
          if [ -z "${CF_ACCOUNT_ID}" ]; then
            echo "‚ùå ERROR: CF_ACCOUNT_ID is not set"
            exit 1
          fi
          
          if [ -z "${CF_API_TOKEN}" ]; then
            echo "‚ùå ERROR: CF_API_TOKEN is not set"
            exit 1
          fi
          
          if [ -z "${CF_KV_NAMESPACE_ID}" ]; then
            echo "‚ùå ERROR: CF_KV_NAMESPACE_ID is not set"
            exit 1
          fi
          
          if [ -z "${CF_VAR_KEY}" ]; then
            echo "‚ùå ERROR: CF_VAR_KEY is not set"
            exit 1
          fi

          echo "=> Configuration validated"
          echo "   ‚Ä¢ KV Namespace: ${CF_KV_NAMESPACE_ID}"
          echo "   ‚Ä¢ KV Key: ${CF_VAR_KEY}"
          echo "   ‚Ä¢ Best IP: ${BESTIP}"
          echo "   ‚Ä¢ Worker: ${CF_WORKER_NAME}"

          retry_kv_put() {
            local attempt=1
            local max_attempts="${MAX_RETRIES:-5}"
            local base_sleep_time="${BASE_SLEEP:-2}"
            
            while [ "$attempt" -le "$max_attempts" ]; do
              echo ""
              echo "‚Üí KV PUT attempt ${attempt}/${max_attempts}"
              
              local api_url="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/storage/kv/namespaces/${CF_KV_NAMESPACE_ID}/values/${CF_VAR_KEY}"
              
              local temp_response
              temp_response=$(mktemp)
              
              local http_code
              http_code=$(curl -s -w "%{http_code}" -X PUT \
                "$api_url" \
                -H "Authorization: Bearer ${CF_API_TOKEN}" \
                -H "Content-Type: text/plain" \
                --data "${BESTIP}" \
                --max-time 30 \
                --connect-timeout 10 \
                -o "$temp_response" 2>&1 || echo "000")
              
              local body
              body=$(cat "$temp_response" 2>/dev/null || echo "")
              rm -f "$temp_response"
              
              echo "   ‚Ä¢ HTTP Status: ${http_code}"
              
              if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
                echo "‚úÖ KV PUT successful"
                if [ -n "$body" ]; then
                  if echo "$body" | jq -e '.success' >/dev/null 2>&1; then
                    echo "   ‚Ä¢ Response confirmed successful"
                  else
                    echo "   ‚Ä¢ Response: $(echo "$body" | head -c 200)"
                  fi
                fi
                return 0
              fi
              
              echo "‚ö†Ô∏è KV PUT failed (HTTP ${http_code})"
              if [ -n "$body" ]; then
                echo "   ‚Ä¢ Response body: $(echo "$body" | head -c 500)"
              fi
              
              case "$http_code" in
                401|403)
                  echo "‚ùå Authentication error - checking token permissions..."
                  echo "   Required permissions: Account.Workers KV Storage:Edit"
                  return 1
                  ;;
                404)
                  echo "‚ùå Resource not found - verifying configuration..."
                  echo "   ‚Ä¢ Account ID: ${CF_ACCOUNT_ID}"
                  echo "   ‚Ä¢ Namespace ID: ${CF_KV_NAMESPACE_ID}"
                  return 1
                  ;;
                405)
                  echo "‚ùå Method not allowed - this suggests API endpoint issue"
                  echo "   ‚Ä¢ Current endpoint: $api_url"
                  echo "   ‚Ä¢ Verify that KV namespace exists and is not bound to a worker"
                  return 1
                  ;;
                429)
                  echo "   ‚Ä¢ Rate limited, will retry with exponential backoff"
                  ;;
                503|504)
                  echo "   ‚Ä¢ Service temporarily unavailable, will retry"
                  ;;
              esac
              
              if [ "$attempt" -lt "$max_attempts" ]; then
                local sleep_duration=$((base_sleep_time * attempt))
                echo "   ‚Ä¢ Waiting ${sleep_duration}s before retry..."
                sleep "$sleep_duration"
              fi
              
              attempt=$((attempt + 1))
            done
            
            return 1
          }

          if ! retry_kv_put; then
            echo ""
            echo "‚ùå FATAL: KV update failed after all retries"
            echo "=> Troubleshooting steps:"
            echo "   1. Verify CF_API_TOKEN has 'Account.Workers KV Storage:Edit' permission"
            echo "   2. Confirm CF_ACCOUNT_ID matches your Cloudflare account"
            echo "   3. Check CF_KV_NAMESPACE_ID exists: wrangler kv:namespace list"
            echo "   4. Ensure KV namespace is NOT bound to a worker (unbind if necessary)"
            echo "   5. Test manually: curl -X PUT https://api.cloudflare.com/client/v4/accounts/\$CF_ACCOUNT_ID/storage/kv/namespaces/\$CF_KV_NAMESPACE_ID/values/\$KEY -H 'Authorization: Bearer \$TOKEN' -d 'test'"
            exit 1
          fi

          echo ""
          echo "‚úÖ KV updated successfully: ${BESTIP}"
          echo "=> Performing health check..."

          if [ -n "${CF_WORKER_NAME}" ]; then
            HEALTH_URL="https://${CF_WORKER_NAME}.workers.dev/health"
            echo "=> Health check URL: ${HEALTH_URL}"
            
            health_check_passed=false
            max_health_checks=5
            
            for health_attempt in $(seq 1 $max_health_checks); do
              echo ""
              echo "‚Üí Health check ${health_attempt}/${max_health_checks}"
              
              http_status=$(curl -s -o /dev/null -w "%{http_code}" \
                --max-time 10 \
                --connect-timeout 5 \
                "${HEALTH_URL}" 2>/dev/null || echo "000")
              
              echo "   ‚Ä¢ HTTP Status: ${http_status}"
              
              if [ "$http_status" = "200" ]; then
                echo "‚úÖ Health check passed"
                health_check_passed=true
                break
              elif [ "$http_status" = "404" ]; then
                echo "‚ö†Ô∏è Health endpoint not found (might not be implemented)"
                health_check_passed=true
                break
              fi
              
              if [ "$health_attempt" -lt "$max_health_checks" ]; then
                echo "   ‚Ä¢ Waiting 3s..."
                sleep 3
              fi
            done

            echo ""
            if [ "$health_check_passed" = "true" ]; then
              echo "‚úÖ Cloudflare KV update completed successfully"
            else
              echo "‚ö†Ô∏è WARNING: Health check inconclusive, but KV was updated to: ${BESTIP}"
              echo "=> Please verify your Worker manually"
            fi
          else
            echo "=> Skipping health check (CF_WORKER_NAME not set)"
          fi
          
          echo "bestip=${BESTIP}" >> "$GITHUB_OUTPUT"
          echo "=> Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=== Cloudflare KV update ended ==="

  cleanup-runs:
    name: Cleanup old workflow runs
    runs-on: ubuntu-latest
    needs: update-proxy-variable
    if: always()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
