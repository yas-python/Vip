name: Rust Proxy Scanner (Ultimate Final Edition)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *' # Runs every hour automatically

concurrency:
  group: rust-proxy-scan
  cancel-in-progress: true

jobs:
  build-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_KV_NAMESPACE_ID: ${{ secrets.CF_KV_NAMESPACE_ID }}
      CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
      CF_VAR_KEY: ${{ secrets.CF_VAR_KEY }}
      RUST_BACKTRACE: full

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          show-progress: false

      - name: Install Rust (latest stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust scanner
        run: |
          echo "‚öôÔ∏è Building Rust proxy scanner..."
          cargo build --release
          echo "‚úÖ Scanner built successfully."

      - name: Run proxy scanner
        run: |
          echo "üîç Running proxy scanner..."
          ./target/release/proxy_scanner > output.txt 2>&1 || true
          echo "‚úÖ Scan completed."
          cat output.txt || echo "‚ö†Ô∏è No output file to display."

      - name: Extract Best IP (Safe & Smart)
        shell: bash
        run: |
          echo "üîé Extracting best IP from output.txt..."

          if [ ! -f output.txt ]; then
            echo "‚ö†Ô∏è output.txt not found, creating empty file..."
            touch output.txt
          fi

          BEST_IP=$(grep -m1 -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}|([a-fA-F0-9:]+:[a-fA-F0-9:]+)' output.txt | head -n 1 | tr -d ' ' || true)

          if [ -z "$BEST_IP" ]; then
            echo "‚ö†Ô∏è No valid IP found ‚Äî using fallback 1.1.1.1"
            BEST_IP="1.1.1.1"
          fi

          echo "‚úÖ Best IP selected: $BEST_IP"
          echo "BEST_IP=$BEST_IP" >> $GITHUB_ENV

      - name: Install Wrangler CLI (official Cloudflare tool)
        run: |
          npm install -g wrangler
          wrangler --version
          echo "‚úÖ Wrangler installed successfully."

      - name: Authenticate Wrangler
        run: |
          echo "üîê Configuring Wrangler authentication..."
          export CF_API_TOKEN=${{ secrets.CF_API_TOKEN }}

      - name: Update Cloudflare KV (Auto)
        run: |
          echo "üöÄ Updating Cloudflare KV with BEST_IP..."
          wrangler kv:key put \
            --namespace-id="${{ env.CF_KV_NAMESPACE_ID }}" \
            "${{ env.CF_VAR_KEY }}" \
            "${{ env.BEST_IP }}" \
            --account-id="${{ env.CF_ACCOUNT_ID }}" || {
              echo "‚ö†Ô∏è KV update failed, retrying..."
              sleep 5
              wrangler kv:key put \
                --namespace-id="${{ env.CF_KV_NAMESPACE_ID }}" \
                "${{ env.CF_VAR_KEY }}" \
                "${{ env.BEST_IP }}" \
                --account-id="${{ env.CF_ACCOUNT_ID }}"
            }
          echo "‚úÖ KV updated successfully."

      - name: Verify KV value
        run: |
          echo "üîé Verifying KV value..."
          wrangler kv:key get \
            --namespace-id="${{ env.CF_KV_NAMESPACE_ID }}" \
            "${{ env.CF_VAR_KEY }}" \
            --account-id="${{ env.CF_ACCOUNT_ID }}" || echo "‚ö†Ô∏è Verification skipped (read-only token)."
          echo "‚úÖ KV verification complete."

      - name: Job finished
        run: echo "üéâ Rust Proxy Scanner Workflow finished successfully with IP: $BEST_IP"
