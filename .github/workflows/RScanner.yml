name: Cloudflare KV Auto-Updater (Ultimate)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"  # Runs automatically every hour

concurrency:
  group: kv-auto-update
  cancel-in-progress: true

env:
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
  CF_KV_NAMESPACE_ID: ${{ secrets.CF_KV_NAMESPACE_ID }}
  CF_VAR_KEY: BESTIP
  BESTIP: ${{ secrets.BESTIP }}
  CF_WORKER_NAME: ${{ secrets.CF_WORKER_NAME }}
  CF_KV_BINDING_NAME: KV

jobs:
  update-kv:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌐 Update Cloudflare KV Automatically
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Cloudflare KV update started ==="
          echo "=> Start time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=> Configuration:"
          echo "   • Account ID: ${CF_ACCOUNT_ID}"
          echo "   • Namespace ID: ${CF_KV_NAMESPACE_ID}"
          echo "   • KV Key: ${CF_VAR_KEY}"
          echo "   • Worker: ${CF_WORKER_NAME:-<none>}"
          echo "   • Best IP: ${BESTIP}"
          echo ""

          # --- Validate Required Variables ---
          for var in CF_ACCOUNT_ID CF_API_TOKEN CF_KV_NAMESPACE_ID CF_VAR_KEY BESTIP; do
            if [ -z "${!var:-}" ]; then
              echo "❌ ERROR: $var is not set"
              exit 1
            fi
          done
          echo "✅ All required environment variables are set."

          # --- REST API Retry Function ---
          retry_kv_put() {
            local attempt=1
            local max_attempts=5
            local base_sleep=2

            while [ "$attempt" -le "$max_attempts" ]; do
              echo ""
              echo "→ Attempt #${attempt}/${max_attempts} to update KV via REST API"
              local api_url="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/storage/kv/namespaces/${CF_KV_NAMESPACE_ID}/values/${CF_VAR_KEY}"

              local tmp_resp
              tmp_resp=$(mktemp)
              local code
              code=$(curl -s -w "%{http_code}" -X PUT "$api_url" \
                -H "Authorization: Bearer ${CF_API_TOKEN}" \
                -H "Content-Type: text/plain" \
                --data-raw "${BESTIP}" \
                --max-time 15 --connect-timeout 10 \
                -o "$tmp_resp" 2>/dev/null || echo "000")

              local body
              body=$(cat "$tmp_resp" 2>/dev/null || echo "")
              rm -f "$tmp_resp"

              echo "   • HTTP Status: ${code}"

              if [ "$code" = "200" ] || [ "$code" = "204" ]; then
                echo "✅ KV successfully updated via REST: ${BESTIP}"
                return 0
              fi

              echo "⚠️ KV PUT failed (HTTP ${code})"
              case "$code" in
                000) echo "   • Network issue or timeout";;
                401) echo "❌ Unauthorized"; return 2;;
                403) echo "❌ Forbidden"; return 3;;
                404) echo "❌ Namespace not found"; return 4;;
                405) echo "❌ Method not allowed (bound namespace)"; return 5;;
                429|500|502|503|504)
                  echo "   • Temporary error, will retry..."
                  ;;
                *) echo "   • Unexpected HTTP ${code}";;
              esac

              if [ "$attempt" -lt "$max_attempts" ]; then
                sleep_time=$((base_sleep * attempt))
                echo "   • Waiting ${sleep_time}s before retry..."
                sleep "$sleep_time"
              fi
              attempt=$((attempt + 1))
            done
            echo "❌ All REST attempts failed."
            return 1
          }

          # --- Execute REST with Safe Exit ---
          set +e
          retry_kv_put
          rv=$?
          set -e

          if [ "$rv" -eq 0 ]; then
            echo "✅ KV successfully updated via REST API"
          else
            echo ""
            echo "⚙️ Switching to Wrangler fallback (error code $rv)"

            # Install Node.js if missing
            if ! command -v node >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y nodejs npm
            fi

            echo "=> Installing Wrangler..."
            npm install -g wrangler@3 --no-progress || echo "⚠️ npm install failed, using npx fallback"

            if command -v wrangler >/dev/null 2>&1; then
              WRANGLER_CMD="wrangler"
            else
              WRANGLER_CMD="npx wrangler"
            fi

            export CLOUDFLARE_API_TOKEN="${CF_API_TOKEN}"
            BIND_NAME="${CF_KV_BINDING_NAME:-KV}"

            echo "→ Running Wrangler KV put..."
            set +e
            ${WRANGLER_CMD} kv:key put --binding="${BIND_NAME}" "${CF_VAR_KEY}" "${BESTIP}" --account-id="${CF_ACCOUNT_ID}" 2>&1 | tee /tmp/wrangler.log
            WRANGLER_EXIT=$?
            set -e

            if [ "$WRANGLER_EXIT" -eq 0 ]; then
              echo "✅ KV successfully updated via Wrangler fallback"
            else
              echo "❌ FATAL: Wrangler fallback failed"
              tail -n 50 /tmp/wrangler.log || true
              exit 1
            fi
          fi

          # --- Optional Worker Health Check ---
          if [ -n "${CF_WORKER_NAME:-}" ]; then
            echo ""
            echo "🩺 Performing Worker Health Check..."
            HEALTH_URL="https://${CF_WORKER_NAME}.workers.dev/health"

            ok=false
            for i in {1..3}; do
              echo "→ Checking attempt $i/3"
              code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$HEALTH_URL" 2>/dev/null || echo "000")
              echo "   • Status: ${code}"
              if [ "$code" = "200" ]; then
                echo "✅ Worker is healthy."
                ok=true
                break
              elif [ "$code" = "404" ]; then
                echo "ℹ️ Health endpoint not implemented (normal)"
                ok=true
                break
              else
                echo "⚠️ Worker not responding, retrying..."
                sleep 3
              fi
            done
            if [ "$ok" = false ]; then
              echo "⚠️ WARNING: Worker Health Check failed."
            fi
          else
            echo "ℹ️ CF_WORKER_NAME not set, skipping health check."
          fi

          echo ""
          echo "bestip=${BESTIP}" >> "$GITHUB_OUTPUT"
          echo "✅ Cloudflare KV Update Completed Successfully"
          echo "=> Final IP: ${BESTIP}"
          echo "=> End time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=== Cloudflare KV update ended ==="
